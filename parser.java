
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\005\000" +
    "\002\004\007\000\002\013\002\000\002\014\002\000\002" +
    "\005\012\000\002\006\004\000\002\006\002\000\002\015" +
    "\002\000\002\016\002\000\002\011\011\000\002\017\002" +
    "\000\002\011\012\000\002\020\002\000\002\021\002\000" +
    "\002\022\002\000\002\023\002\000\002\012\017\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\004\000\002\010\005" +
    "\000\002\010\003\000\002\010\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\024\002\000\002\007\006\000\002\025\002" +
    "\000\002\007\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\026\004\017\006\024\007\005\010\010\011" +
    "\022\024\013\031\023\035\006\040\016\041\004\001\002" +
    "\000\036\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\032\uffe0\037\uffe0\001\002\000\004\031\ufff2\001\002\000" +
    "\026\004\017\006\024\007\005\010\010\011\022\024\013" +
    "\031\023\035\006\040\016\041\004\001\002\000\034\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\024\ufffc\031\ufffc\035\ufffc\036\ufffc\040\ufffc\041\ufffc\001" +
    "\002\000\004\031\uffed\001\002\000\034\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\024\ufffd\031" +
    "\ufffd\035\ufffd\036\ufffd\040\ufffd\041\ufffd\001\002\000\030" +
    "\002\120\004\017\006\024\007\005\010\010\011\022\024" +
    "\013\031\023\035\006\040\016\041\004\001\002\000\012" +
    "\024\013\031\023\040\016\041\004\001\002\000\014\023" +
    "\044\024\045\025\054\026\051\037\116\001\002\000\034" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\024\ufffb\031\ufffb\035\ufffb\036\ufffb\040\ufffb\041\ufffb" +
    "\001\002\000\040\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\030\114\032\uffe1\037\uffe1\001\002\000\004\031" +
    "\103\001\002\000\034\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\024\ufffa\031\ufffa\035\ufffa\036" +
    "\ufffa\040\ufffa\041\ufffa\001\002\000\032\002\uffff\004\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\024\uffff\031\uffff\035" +
    "\uffff\036\uffff\040\uffff\041\uffff\001\002\000\004\031\077" +
    "\001\002\000\012\024\013\031\023\040\016\041\004\001" +
    "\002\000\026\004\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\024\uffef\031\uffef\035\uffef\040\uffef\041\uffef\001\002\000" +
    "\026\004\017\006\024\007\005\010\010\011\022\024\013" +
    "\031\023\035\006\040\016\041\004\001\002\000\004\007" +
    "\027\001\002\000\004\031\030\001\002\000\014\020\034" +
    "\024\013\031\032\040\016\041\004\001\002\000\010\021" +
    "\036\022\037\032\074\001\002\000\014\020\034\024\013" +
    "\031\032\040\016\041\004\001\002\000\026\012\047\013" +
    "\053\014\055\015\050\016\052\017\046\023\044\024\045" +
    "\025\054\026\051\001\002\000\014\020\034\024\013\031" +
    "\032\040\016\041\004\001\002\000\012\021\uffd8\022\uffd8" +
    "\032\uffd8\037\uffd8\001\002\000\014\020\uffd7\024\uffd7\031" +
    "\uffd7\040\uffd7\041\uffd7\001\002\000\014\020\uffd5\024\uffd5" +
    "\031\uffd5\040\uffd5\041\uffd5\001\002\000\014\020\034\024" +
    "\013\031\032\040\016\041\004\001\002\000\012\021\uffd4" +
    "\022\uffd4\032\uffd4\037\uffd4\001\002\000\014\020\034\024" +
    "\013\031\032\040\016\041\004\001\002\000\012\021\uffd6" +
    "\022\uffd6\032\uffd6\037\uffd6\001\002\000\012\024\013\031" +
    "\023\040\016\041\004\001\002\000\012\024\013\031\023" +
    "\040\016\041\004\001\002\000\012\024\013\031\023\040" +
    "\016\041\004\001\002\000\012\024\013\031\023\040\016" +
    "\041\004\001\002\000\012\024\013\031\023\040\016\041" +
    "\004\001\002\000\012\024\013\031\023\040\016\041\004" +
    "\001\002\000\012\024\013\031\023\040\016\041\004\001" +
    "\002\000\012\024\013\031\023\040\016\041\004\001\002" +
    "\000\012\024\013\031\023\040\016\041\004\001\002\000" +
    "\012\024\013\031\023\040\016\041\004\001\002\000\022" +
    "\021\uffdd\022\uffdd\023\044\024\045\025\054\026\051\032" +
    "\uffdd\037\uffdd\001\002\000\036\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\032\uffe6\037\uffe6\001\002\000\022" +
    "\021\uffde\022\uffde\023\044\024\045\025\054\026\051\032" +
    "\uffde\037\uffde\001\002\000\022\021\uffdb\022\uffdb\023\044" +
    "\024\045\025\054\026\051\032\uffdb\037\uffdb\001\002\000" +
    "\036\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\032" +
    "\uffe5\037\uffe5\001\002\000\022\021\uffdc\022\uffdc\023\044" +
    "\024\045\025\054\026\051\032\uffdc\037\uffdc\001\002\000" +
    "\022\021\uffdf\022\uffdf\023\044\024\045\025\054\026\051" +
    "\032\uffdf\037\uffdf\001\002\000\022\021\uffda\022\uffda\023" +
    "\044\024\045\025\054\026\051\032\uffda\037\uffda\001\002" +
    "\000\036\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\054\026\051" +
    "\032\uffe7\037\uffe7\001\002\000\036\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\054\026\051\032\uffe8\037\uffe8\001\002\000" +
    "\010\021\036\022\037\032\073\001\002\000\030\012\047" +
    "\013\053\014\055\015\050\016\052\017\046\023\044\024" +
    "\045\025\054\026\051\032\072\001\002\000\036\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\032\uffe4\037\uffe4" +
    "\001\002\000\012\021\uffd9\022\uffd9\032\uffd9\037\uffd9\001" +
    "\002\000\004\037\075\001\002\000\034\002\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\024\uffee\031" +
    "\uffee\035\uffee\036\uffee\040\uffee\041\uffee\001\002\000\014" +
    "\023\044\024\045\025\054\026\051\032\072\001\002\000" +
    "\012\024\013\031\023\040\016\041\004\001\002\000\014" +
    "\023\044\024\045\025\054\026\051\032\101\001\002\000" +
    "\004\037\102\001\002\000\034\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\024\ufff8\031\ufff8\035" +
    "\ufff8\036\ufff8\040\ufff8\041\ufff8\001\002\000\014\020\034" +
    "\024\013\031\032\040\016\041\004\001\002\000\010\021" +
    "\036\022\037\032\105\001\002\000\026\004\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\024\ufff7\031\ufff7\035\ufff7\040" +
    "\ufff7\041\ufff7\001\002\000\026\004\017\006\024\007\005" +
    "\010\010\011\022\024\013\031\023\035\006\040\016\041" +
    "\004\001\002\000\034\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\024\ufff6\031\ufff6\035\ufff6\036" +
    "\ufff6\040\ufff6\041\ufff6\001\002\000\034\002\ufff3\004\ufff3" +
    "\005\112\006\ufff3\007\ufff3\010\ufff3\011\ufff3\024\ufff3\031" +
    "\ufff3\035\ufff3\036\ufff3\040\ufff3\041\ufff3\001\002\000\034" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\024\ufff5\031\ufff5\035\ufff5\036\ufff5\040\ufff5\041\ufff5" +
    "\001\002\000\026\004\017\006\024\007\005\010\010\011" +
    "\022\024\013\031\023\035\006\040\016\041\004\001\002" +
    "\000\034\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\024\ufff4\031\ufff4\035\ufff4\036\ufff4\040\ufff4" +
    "\041\ufff4\001\002\000\012\024\013\031\023\040\016\041" +
    "\004\001\002\000\036\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\044\024\045\025" +
    "\054\026\051\032\uffe2\037\uffe2\001\002\000\034\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\024" +
    "\ufffe\031\ufffe\035\ufffe\036\ufffe\040\ufffe\041\ufffe\001\002" +
    "\000\036\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\032\uffe3\037\uffe3\001\002\000\004\002\000\001\002\000" +
    "\032\002\001\004\001\006\001\007\001\010\001\011\001" +
    "\024\001\031\001\035\001\036\001\040\001\041\001\001" +
    "\002\000\004\031\123\001\002\000\012\024\013\031\023" +
    "\040\016\041\004\001\002\000\014\023\044\024\045\025" +
    "\054\026\051\037\125\001\002\000\014\020\uffec\024\uffec" +
    "\031\uffec\040\uffec\041\uffec\001\002\000\014\020\034\024" +
    "\013\031\032\040\016\041\004\001\002\000\010\021\036" +
    "\022\037\037\130\001\002\000\012\024\uffeb\031\uffeb\040" +
    "\uffeb\041\uffeb\001\002\000\012\024\013\031\023\040\016" +
    "\041\004\001\002\000\014\023\044\024\045\025\054\026" +
    "\051\032\133\001\002\000\026\004\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\024\uffea\031\uffea\035\uffea\040\uffea\041" +
    "\uffea\001\002\000\026\004\017\006\024\007\005\010\010" +
    "\011\022\024\013\031\023\035\006\040\016\041\004\001" +
    "\002\000\034\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\024\uffe9\031\uffe9\035\uffe9\036\uffe9\040" +
    "\uffe9\041\uffe9\001\002\000\030\004\017\006\024\007\005" +
    "\010\010\011\022\024\013\031\023\035\006\036\137\040" +
    "\016\041\004\001\002\000\034\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\024\ufff9\031\ufff9\035" +
    "\ufff9\036\ufff9\040\ufff9\041\ufff9\001\002\000\004\031\141" +
    "\001\002\000\014\020\034\024\013\031\032\040\016\041" +
    "\004\001\002\000\010\021\036\022\037\032\143\001\002" +
    "\000\026\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\024" +
    "\ufff1\031\ufff1\035\ufff1\040\ufff1\041\ufff1\001\002\000\026" +
    "\004\017\006\024\007\005\010\010\011\022\024\013\031" +
    "\023\035\006\040\016\041\004\001\002\000\034\002\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\024" +
    "\ufff0\031\ufff0\035\ufff0\036\ufff0\040\ufff0\041\ufff0\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\020\002\011\003\020\004\010\005\006\010" +
    "\013\011\014\012\017\001\001\000\002\001\001\000\004" +
    "\015\137\001\001\000\020\002\135\003\020\004\010\005" +
    "\006\010\013\011\014\012\017\001\001\000\002\001\001" +
    "\000\004\020\121\001\001\000\002\001\001\000\016\003" +
    "\120\004\010\005\006\010\013\011\014\012\017\001\001" +
    "\000\004\010\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\075\001" +
    "\001\000\004\017\024\001\001\000\016\003\025\004\010" +
    "\005\006\010\013\011\014\012\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\030\010\032\001\001" +
    "\000\002\001\001\000\006\007\067\010\070\001\001\000" +
    "\002\001\001\000\006\007\034\010\032\001\001\000\002" +
    "\001\001\000\004\024\041\001\001\000\004\025\037\001" +
    "\001\000\006\007\040\010\032\001\001\000\002\001\001" +
    "\000\006\007\042\010\032\001\001\000\002\001\001\000" +
    "\004\010\066\001\001\000\004\010\065\001\001\000\004" +
    "\010\064\001\001\000\004\010\063\001\001\000\004\010" +
    "\062\001\001\000\004\010\061\001\001\000\004\010\060" +
    "\001\001\000\004\010\057\001\001\000\004\010\056\001" +
    "\001\000\004\010\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\103\010\032\001\001\000\002\001" +
    "\001\000\004\013\105\001\001\000\016\003\106\004\010" +
    "\005\006\010\013\011\014\012\017\001\001\000\004\014" +
    "\107\001\001\000\004\006\110\001\001\000\002\001\001" +
    "\000\016\003\112\004\010\005\006\010\013\011\014\012" +
    "\017\001\001\000\002\001\001\000\004\010\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\123\001\001\000\002\001\001\000\004\021\125\001" +
    "\001\000\006\007\126\010\032\001\001\000\002\001\001" +
    "\000\004\022\130\001\001\000\004\010\131\001\001\000" +
    "\002\001\001\000\004\023\133\001\001\000\016\003\134" +
    "\004\010\005\006\010\013\011\014\012\017\001\001\000" +
    "\002\001\001\000\016\003\120\004\010\005\006\010\013" +
    "\011\014\012\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\141\010\032\001\001\000\002\001\001" +
    "\000\004\016\143\001\001\000\016\003\144\004\010\005" +
    "\006\010\013\011\014\012\017\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    
    // Variables globales
    private int var = 0;
    private int etq = 0;
    
    
    // Generadores de referencias
    /**
     * Genera una variable con la estructura '$vX', siendo X un número.
     */
    private String crearVariable() {
        return "$v" + (var++);
    }
    
    /**
     * Genera una etiqueta con la estructura 'EX', siendo X un número.
     */
    private String crearEtiqueta() {
        return "E" + (etq++);
    }
    
    
    // Generadores de código intermedio (.ctd)
    // ----------------------------------------------------------------------------------
    
    // Referencias
    public void variable(String variable, String valor) {
         PLC.out.println("\t" + variable + " = " + valor + ";");
    }
    
    public void etiqueta(String etiqueta) {
         PLC.out.println(etiqueta + ":");
    }
    
    public void salto(String etiqueta) {
        PLC.out.println("\tgoto " + etiqueta + ";");
    }
    
    // Operdores
    public void suma(String variable, String a, String b) {
        PLC.out.println("\t" + variable + " = " + a + " + " + b + ";");
    }
    
    public void resta(String variable, String a, String b) {
        PLC.out.println("\t" + variable + " = " + a + " - " + b + ";");
    }
    
    public void producto(String variable, String a, String b) {
        PLC.out.println("\t" + variable + " = " + a + " * " + b + ";");
    }
    
    public void division(String variable, String a, String b) {
        PLC.out.println("\t" + variable + " = " + a + " / " + b + ";");
    }
    
    public void negativo(String variable, String a) {
        PLC.out.println("\t" + variable + " = -" + a + ";");
    }
    
    // Funciones
    public void print(String argumento) {
        PLC.out.println("\tprint " + argumento + ";");
    }
    
    public void ifMenor(String a, String b, String etiqueta) {
        PLC.out.println("\tif (" + a + " < " + b + ") goto " + etiqueta + ";");
    }
    
    public void ifIgual(String a, String b, String etiqueta) {
        PLC.out.println("\tif (" + a + " == " + b + ") goto " + etiqueta + ";");
    }
    // ----------------------------------------------------------------------------------
    
    
    /* Esta clase interna se encarga de almacenar 3 etiquetas diferentes
     * de forma que puedan moverse por la gramática a través de RESULT.
     * 
     * Las etiquetas representan lo siguiente:
     * 1. Salto si se cumple la condición (true).
     * 2. Salto si no se cumple la condición (false).
     * 3. Salto tras ejecutar la sentencia (salida).
     */
    class Condicion {
        
        // Variable
        private String[] etiquetas = {null, null, null};
        
        
        // Constructores
        public Condicion() {
            etiquetas[0] = crearEtiqueta();
            etiquetas[1] = crearEtiqueta();
        }
        
        public Condicion(String etiqueta1, String etiqueta2) {
            etiquetas[0] = etiqueta1;
            etiquetas[1] = etiqueta2;
        }
        
        
        // Getters
        public String etqTrue() {
            return etiquetas[0];
        }
        
        public String etqFalse() {
            return etiquetas[1];
        }
        
        public String etqSalida() {
            return etiquetas[2];
        }
        
        
        // Setters
        public void setEtqTrue(String etiqueta) {
            etiquetas[0] = etiqueta;
        }
        
        public void setEtqFalse(String etiqueta) {
            etiquetas[1] = etiqueta;
        }
        
        public void setEtqSalida(String etiqueta) {
            etiquetas[2] = etiqueta;
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sents ::= sents sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sents",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sents EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sents ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sents",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= exp PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= sent_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= sent_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= AL sents CL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent_print ::= PRINT AP exp CP PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = e;     print(e);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_print",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  c.setEtqSalida(crearEtiqueta());    etiqueta(c.etqTrue());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
  salto(c.etqSalida());               etiqueta(c.etqFalse()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_if ::= IF AP cond CP NT$0 sent NT$1 sent_else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		  etiqueta(c.etqSalida());                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent_else ::= ELSE sent 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_else",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_else",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              String RESULT =null;
  RESULT = crearEtiqueta();   etiqueta(RESULT);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  c.setEtqSalida(RESULT);     etiqueta(c.etqTrue());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent_while ::= WHILE NT$2 AP cond CP NT$3 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  salto(c.etqSalida());       etiqueta(c.etqFalse()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              String RESULT =null;
  RESULT = crearEtiqueta();   etiqueta(RESULT);                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent_while ::= DO NT$4 sent WHILE AP cond CP PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  c.setEtqSalida(RESULT);     etiqueta(c.etqTrue());  salto(c.etqSalida());   etiqueta(c.etqFalse()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$5 ::= 
            {
              String RESULT =null;
  RESULT = crearEtiqueta();                                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
  etiqueta(RESULT);                                                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  c.setEtqSalida(RESULT);     RESULT = crearEtiqueta();   etiqueta(RESULT);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
  salto(c.etqSalida());       etiqueta(c.etqTrue());                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent_for ::= FOR NT$5 AP exp PYC NT$6 cond PYC NT$7 exp CP NT$8 sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		  salto(RESULT);              etiqueta(c.etqFalse());                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp SUM exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = crearVariable();   suma(RESULT, a, b);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp RES exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = crearVariable();   resta(RESULT, a, b);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp MUL exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = crearVariable();   producto(RESULT, a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp DIV exp 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = crearVariable();   division(RESULT, a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = e;                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= RES exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = crearVariable();   negativo(RESULT, e);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= VAR IGUAL exp 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v;     variable(RESULT, e);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= VAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = v;                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = n;                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond ::= exp EQ exp 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Condicion();   ifIgual(a, b, RESULT.etqTrue());    salto(RESULT.etqFalse());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= exp NE exp 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Condicion();   ifIgual(a, b, RESULT.etqFalse());   salto(RESULT.etqTrue());    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cond ::= exp LT exp 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Condicion();   ifMenor(a, b, RESULT.etqTrue());    salto(RESULT.etqFalse());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cond ::= exp LE exp 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Condicion();   ifMenor(b, a, RESULT.etqFalse());   salto(RESULT.etqTrue());    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= exp GT exp 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Condicion();   ifMenor(b, a, RESULT.etqTrue());    salto(RESULT.etqFalse());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond ::= exp GE exp 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Condicion();   ifMenor(a, b, RESULT.etqFalse());   salto(RESULT.etqTrue());    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= AP cond CP 
            {
              Condicion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= NO cond 
            {
              Condicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Condicion(c.etqFalse(), c.etqTrue());              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$9 ::= 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  etiqueta(a.etqTrue());                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= cond AND NT$9 cond 
            {
              Condicion RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Condicion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicion b = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  etiqueta(a.etqFalse());     salto(b.etqFalse());    RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$10 ::= 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  etiqueta(a.etqFalse());                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= cond OR NT$10 cond 
            {
              Condicion RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Condicion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicion b = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  etiqueta(a.etqTrue());      salto(b.etqTrue());     RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
