
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.String;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\012\000\002\004\006\000" +
    "\002\004\006\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\003\000\002\005\006\000\002\006\003\000\002" +
    "\006\004\000\002\011\002\000\002\006\006\000\002\012" +
    "\002\000\002\006\007\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\007\010\000\002\010\003\000" +
    "\002\013\002\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\010\013\011\026\004\031\006\001\002\000" +
    "\004\006\144\001\002\000\012\002\143\013\011\026\004" +
    "\031\006\001\002\000\006\006\013\014\014\001\002\000" +
    "\012\002\uffff\013\uffff\026\uffff\031\uffff\001\002\000\004" +
    "\013\012\001\002\000\012\002\ufffd\013\ufffd\026\ufffd\031" +
    "\ufffd\001\002\000\012\002\ufffe\013\ufffe\026\ufffe\031\ufffe" +
    "\001\002\000\004\032\134\001\002\000\012\004\017\027" +
    "\022\030\015\032\016\001\002\000\026\005\uffeb\006\131" +
    "\007\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\001\002\000\010\015\100\020\101\022\060" +
    "\001\002\000\014\004\036\005\043\016\044\030\015\032" +
    "\122\001\002\000\016\013\ufffb\015\070\016\071\020\074" +
    "\021\072\022\073\001\002\000\016\013\ufffc\015\030\016" +
    "\031\020\033\021\032\022\034\001\002\000\022\006\023" +
    "\007\uffd4\013\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\001\002\000\004\032\024\001\002\000\004\012\025" +
    "\001\002\000\004\032\026\001\002\000\004\007\027\001" +
    "\002\000\020\007\uffd3\013\uffd3\015\uffd3\016\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\001\002\000\010\004\036\030\015\032" +
    "\120\001\002\000\004\032\117\001\002\000\004\032\116" +
    "\001\002\000\012\004\017\027\022\030\015\032\065\001" +
    "\002\000\010\004\036\030\015\032\035\001\002\000\024" +
    "\005\uffee\007\uffee\012\uffee\013\uffee\015\056\016\uffee\020" +
    "\057\021\uffee\022\060\001\002\000\010\005\043\016\044" +
    "\032\042\001\002\000\024\005\uffed\007\uffed\012\uffed\013" +
    "\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022\uffed\001\002" +
    "\000\004\032\041\001\002\000\024\005\ufff1\007\ufff1\012" +
    "\ufff1\013\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\001\002\000\006\005\uffe9\012\uffe7\001\002\000\024\005" +
    "\uffec\007\uffec\012\uffec\013\uffec\015\uffec\016\uffec\020\uffec" +
    "\021\uffec\022\uffec\001\002\000\004\032\047\001\002\000" +
    "\004\005\046\001\002\000\024\005\ufff7\007\ufff7\012\ufff7" +
    "\013\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\001" +
    "\002\000\006\005\uffe8\012\uffe5\001\002\000\004\012\051" +
    "\001\002\000\006\016\044\032\042\001\002\000\004\005" +
    "\uffe4\001\002\000\004\012\054\001\002\000\006\016\044" +
    "\032\042\001\002\000\004\005\uffe6\001\002\000\010\004" +
    "\036\030\015\032\061\001\002\000\010\004\036\030\015" +
    "\032\061\001\002\000\010\004\036\030\015\032\061\001" +
    "\002\000\010\015\056\020\057\022\060\001\002\000\024" +
    "\005\uffef\007\uffef\012\uffef\013\uffef\015\uffef\016\uffef\020" +
    "\uffef\021\uffef\022\uffef\001\002\000\024\005\ufff2\007\ufff2" +
    "\012\ufff2\013\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\022" +
    "\034\001\002\000\024\005\ufff6\007\ufff6\012\ufff6\013\ufff6" +
    "\015\ufff6\016\ufff6\020\040\021\032\022\034\001\002\000" +
    "\020\007\ufff1\013\ufff1\015\100\016\ufff1\020\101\021\ufff1" +
    "\022\060\001\002\000\020\007\uffda\013\uffda\015\uffda\016" +
    "\uffda\020\uffda\021\uffda\022\073\001\002\000\020\007\uffdb" +
    "\013\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\022\034\001" +
    "\002\000\012\004\017\027\022\030\015\032\114\001\002" +
    "\000\012\004\017\027\022\030\015\032\112\001\002\000" +
    "\012\004\017\027\022\030\015\032\107\001\002\000\010" +
    "\004\036\030\015\032\061\001\002\000\012\004\017\027" +
    "\022\030\015\032\075\001\002\000\020\007\uffdc\013\uffdc" +
    "\015\100\016\uffdc\020\101\021\uffdc\022\060\001\002\000" +
    "\020\007\uffd8\013\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8" +
    "\022\073\001\002\000\020\007\uffd9\013\uffd9\015\uffd9\016" +
    "\uffd9\020\uffd9\021\uffd9\022\034\001\002\000\012\004\017" +
    "\027\022\030\015\032\016\001\002\000\012\004\017\027" +
    "\022\030\015\032\016\001\002\000\020\007\uffdd\013\uffdd" +
    "\015\uffdd\016\uffdd\020\uffdd\021\uffdd\022\073\001\002\000" +
    "\020\007\ufff2\013\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\022\034\001\002\000\020\007\uffe2\013\uffe2\015\uffe2\016" +
    "\uffe2\020\074\021\072\022\073\001\002\000\020\007\ufff6" +
    "\013\ufff6\015\ufff6\016\ufff6\020\033\021\032\022\034\001" +
    "\002\000\020\007\uffd5\013\uffd5\015\uffd5\016\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\001\002\000\020\007\uffd7\013\uffd7\015" +
    "\100\016\uffd7\020\101\021\uffd7\022\060\001\002\000\020" +
    "\007\uffd6\013\uffd6\015\uffd6\016\uffd6\020\uffd6\021\uffd6\022" +
    "\073\001\002\000\014\015\030\016\031\020\033\021\032" +
    "\022\034\001\002\000\020\007\uffdf\013\uffdf\015\100\016" +
    "\uffdf\020\101\021\uffdf\022\060\001\002\000\020\007\uffde" +
    "\013\uffde\015\uffde\016\uffde\020\074\021\072\022\073\001" +
    "\002\000\020\007\uffe1\013\uffe1\015\100\016\uffe1\020\101" +
    "\021\uffe1\022\060\001\002\000\020\007\uffe0\013\uffe0\015" +
    "\uffe0\016\uffe0\020\074\021\072\022\073\001\002\000\024" +
    "\005\ufff0\007\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\001\002\000\024\005\ufff3\007\ufff3" +
    "\012\ufff3\013\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\001\002\000\024\005\ufff5\007\ufff5\012\ufff5\013\ufff5" +
    "\015\056\016\ufff5\020\057\021\ufff5\022\060\001\002\000" +
    "\024\005\ufff4\007\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4" +
    "\020\040\021\032\022\034\001\002\000\014\005\uffe9\012" +
    "\uffe7\015\056\020\057\022\060\001\002\000\020\005\uffd2" +
    "\012\uffd1\015\030\016\031\020\040\021\032\022\034\001" +
    "\002\000\004\005\125\001\002\000\020\007\uffe3\013\uffe3" +
    "\015\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3\001\002\000" +
    "\004\012\127\001\002\000\010\004\036\030\015\032\061" +
    "\001\002\000\004\005\uffd0\001\002\000\004\032\132\001" +
    "\002\000\004\007\133\001\002\000\024\005\uffea\007\uffea" +
    "\012\uffea\013\uffea\015\uffea\016\uffea\020\uffea\021\uffea\022" +
    "\uffea\001\002\000\004\012\135\001\002\000\004\032\136" +
    "\001\002\000\004\007\137\001\002\000\004\014\140\001" +
    "\002\000\012\004\017\027\022\030\015\032\016\001\002" +
    "\000\016\013\ufffa\015\070\016\071\020\074\021\072\022" +
    "\073\001\002\000\012\002\001\013\001\026\001\031\001" +
    "\001\002\000\004\002\000\001\002\000\012\004\017\027" +
    "\022\030\015\032\016\001\002\000\016\007\150\015\070" +
    "\016\071\020\074\021\072\022\073\001\002\000\016\007" +
    "\147\015\030\016\031\020\033\021\032\022\034\001\002" +
    "\000\004\013\ufff9\001\002\000\004\013\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\010\002\004\003\006\004\007\001\001\000" +
    "\002\001\001\000\006\003\141\004\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\020" +
    "\007\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\122\006\044\010\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\066\007\065\001\001\000\004" +
    "\005\036\001\001\000\002\001\001\000\004\006\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\047" +
    "\001\001\000\002\001\001\000\004\006\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\054\001\001" +
    "\000\002\001\001\000\004\005\063\001\001\000\004\005" +
    "\062\001\001\000\004\005\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\110\007\114\001\001\000\006\005\110\007\112\001" +
    "\001\000\006\005\110\007\107\001\001\000\004\005\105" +
    "\001\001\000\006\005\076\007\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\104" +
    "\007\103\001\001\000\006\005\102\007\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\052\001\001\000\004\013\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\122" +
    "\010\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\110\007\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\145\007\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol cur_token) {
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Syntax error:");
        // report_error("Syntax error",null);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaExp ::= listaExp linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaExp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaExp ::= linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= exp PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= IDENT ASIG vect 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TablaSimbolos.insertarVector(i,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= IDENT ASIG mat 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TablaSimbolos.insertar(i,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= IDENT AP NUMERO COMA NUMERO CP ASIG mat 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TablaSimbolos.insertar(i,Matrices.completar(m,n1.intValue(),n2.intValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= PRINT AP vect CP 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Matrices.print(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= PRINT AP mat CP 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Matrices.print(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vect ::= ALL contentVector CLL 
            {
              double[] RESULT =null;
		int cVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Double> cV = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Matrices.toVector(cV); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vect ::= NUMERO MAS vect 
            {
              double[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.suma(n,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vect ::= vect MAS NUMERO 
            {
              double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.suma(n,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vect ::= vect MAS vect 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.suma(v1,v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vect ::= vect MENOS NUMERO 
            {
              double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.suma(-n,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vect ::= NUMERO POR vect 
            {
              double[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(n,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vect ::= vect POR NUMERO 
            {
              double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(n,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vect ::= vect DIV NUMERO 
            {
              double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(1/n,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vect ::= NUMERO CONCATENA vect 
            {
              double[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(n,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vect ::= vect CONCATENA NUMERO 
            {
              double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(n,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vect ::= vect CONCATENA vect 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(v1,v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vect ::= ALL CLL 
            {
              double[] RESULT =null;
		 RESULT = new double[0]; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vect ::= VECTOR 
            {
              double[] RESULT =null;
		int vVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vVright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] vV = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vect ::= VECTOR AP NUMERO CP 
            {
              double[] RESULT =null;
		int vVleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vVright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		double[] vV = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Matrices.subVector(vV,n.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contentVector ::= NUMERO 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contentVector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contentVector ::= MENOS NUMERO 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(-n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contentVector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = new ArrayList<>(); RESULT.add(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contentVector ::= NUMERO NT$0 COMA contentVector 
            {
              ArrayList<Double> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ArrayList<Double>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Double> c = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT.addAll(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contentVector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$1 ::= 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = new ArrayList<>(); RESULT.add(-n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contentVector ::= MENOS NUMERO NT$1 COMA contentVector 
            {
              ArrayList<Double> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ArrayList<Double>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Double> c = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT.addAll(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contentVector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mat ::= ALL contentMatriz CLL 
            {
              double[][] RESULT =null;
		int cMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cMright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> cM = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Matrices.toArray(cM); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mat ::= NUMERO MAS mat 
            {
              double[][] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.suma(n,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mat ::= mat MAS NUMERO 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.suma(n,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mat ::= mat MAS mat 
            {
              double[][] RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.suma(m1,m2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mat ::= mat MENOS NUMERO 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.suma(-n,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mat ::= mat MENOS mat 
            {
              double[][] RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.suma(m1,Matrices.producto(-1,m2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mat ::= NUMERO POR mat 
            {
              double[][] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(n,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mat ::= mat POR NUMERO 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(n,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mat ::= vect POR vect 
            {
              double[][] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(v1,v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mat ::= vect POR mat 
            {
              double[][] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(v,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mat ::= mat POR vect 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(m,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mat ::= mat POR mat 
            {
              double[][] RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(m1,m2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mat ::= mat DIV NUMERO 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(1/n,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mat ::= mat DIV mat 
            {
              double[][] RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(m1,Matrices.inversa(m2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mat ::= mat CONCATENA vect 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(m,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mat ::= MATRIZ 
            {
              double[][] RESULT =null;
		int mMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mMright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] mM = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mM; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // mat ::= MATRIZ AP NUMERO COMA NUMERO CP 
            {
              double[][] RESULT =null;
		int mMleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mMright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		double[][] mM = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            if (n1 > mM.length) {
                System.out.print(Matrices.ERROR_FILAS_INSUF);
                System.exit(0);
            } else if (n2 > mM[0].length) {
                System.out.print(Matrices.ERROR_COLUM_INSUF);
                System.exit(0);
            } else {
                RESULT = Matrices.subMatriz(mM,n1.intValue(),n2.intValue());
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contentMatriz ::= vect 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(Matrices.toArrayList(v)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contentMatriz",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$2 ::= 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = new ArrayList<>(); RESULT.add(Matrices.toArrayList(v)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contentMatriz ::= vect NT$2 COMA contentMatriz 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ArrayList<ArrayList<Double>>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> c = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT.addAll(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contentMatriz",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
