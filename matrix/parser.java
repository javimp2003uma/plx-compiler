
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.lang.String;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\006\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\006\000\002\006\006\000\002\006\006" +
    "\000\002\006\003\000\002\007\003\000\002\007\005\000" +
    "\002\011\003\000\002\011\005\000\002\010\005\000\002" +
    "\010\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\010\013\011\025\004\026\006\001\002\000" +
    "\004\010\073\001\002\000\012\002\072\013\011\025\004" +
    "\026\006\001\002\000\004\014\013\001\002\000\012\002" +
    "\uffff\013\uffff\025\uffff\026\uffff\001\002\000\004\013\012" +
    "\001\002\000\012\002\ufffd\013\ufffd\025\ufffd\026\ufffd\001" +
    "\002\000\012\002\ufffe\013\ufffe\025\ufffe\026\ufffe\001\002" +
    "\000\022\004\021\006\022\010\025\016\016\022\017\023" +
    "\014\024\020\026\015\001\002\000\004\010\066\001\002" +
    "\000\016\011\uffee\013\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\001\002\000\016\004\021\006\022\022\017\023\014" +
    "\024\020\026\015\001\002\000\004\010\062\001\002\000" +
    "\004\010\057\001\002\000\004\004\050\001\002\000\004" +
    "\027\040\001\002\000\014\013\ufffc\015\027\016\030\017" +
    "\032\020\031\001\002\000\016\011\ufff5\013\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\001\002\000\022\004\021\006" +
    "\022\010\025\016\016\022\017\023\014\024\020\026\015" +
    "\001\002\000\014\011\033\015\027\016\030\017\032\020" +
    "\031\001\002\000\022\004\021\006\022\010\025\016\016" +
    "\022\017\023\014\024\020\026\015\001\002\000\022\004" +
    "\021\006\022\010\025\016\016\022\017\023\014\024\020" +
    "\026\015\001\002\000\022\004\021\006\022\010\025\016" +
    "\016\022\017\023\014\024\020\026\015\001\002\000\022" +
    "\004\021\006\022\010\025\016\016\022\017\023\014\024" +
    "\020\026\015\001\002\000\016\011\ufff6\013\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\001\002\000\016\011\ufff8\013" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\001\002\000\016" +
    "\011\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\001" +
    "\002\000\016\011\ufff9\013\ufff9\015\ufff9\016\ufff9\017\032" +
    "\020\031\001\002\000\016\011\ufffa\013\ufffa\015\ufffa\016" +
    "\ufffa\017\032\020\031\001\002\000\012\005\uffeb\007\uffeb" +
    "\012\046\013\uffeb\001\002\000\006\007\uffed\013\044\001" +
    "\002\000\004\007\043\001\002\000\016\011\ufff3\013\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\001\002\000\004\027" +
    "\040\001\002\000\004\007\uffec\001\002\000\004\027\040" +
    "\001\002\000\010\005\uffea\007\uffea\013\uffea\001\002\000" +
    "\004\027\040\001\002\000\004\005\052\001\002\000\016" +
    "\011\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\001" +
    "\002\000\004\005\054\001\002\000\006\005\uffe9\012\055" +
    "\001\002\000\004\004\050\001\002\000\004\005\uffe8\001" +
    "\002\000\022\004\021\006\022\010\025\016\016\022\017" +
    "\023\014\024\020\026\015\001\002\000\014\011\061\015" +
    "\027\016\030\017\032\020\031\001\002\000\016\011\uffef" +
    "\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef\001\002\000" +
    "\022\004\021\006\022\010\025\016\016\022\017\023\014" +
    "\024\020\026\015\001\002\000\014\011\064\015\027\016" +
    "\030\017\032\020\031\001\002\000\016\011\ufff1\013\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\001\002\000\016\011" +
    "\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\001\002" +
    "\000\022\004\021\006\022\010\025\016\016\022\017\023" +
    "\014\024\020\026\015\001\002\000\014\011\070\015\027" +
    "\016\030\017\032\020\031\001\002\000\016\011\ufff0\013" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\001\002\000\012" +
    "\002\001\013\001\025\001\026\001\001\002\000\004\002" +
    "\000\001\002\000\022\004\021\006\022\010\025\016\016" +
    "\022\017\023\014\024\020\026\015\001\002\000\014\011" +
    "\075\015\027\016\030\017\032\020\031\001\002\000\004" +
    "\013\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\010\002\004\003\006\004\007\001\001\000" +
    "\002\001\001\000\006\003\070\004\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\022\006\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\050" +
    "\001\001\000\006\007\041\011\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\025\006\023\001\001" +
    "\000\002\001\001\000\006\005\036\006\023\001\001\000" +
    "\006\005\035\006\023\001\001\000\006\005\034\006\023" +
    "\001\001\000\006\005\033\006\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\044\011\040" +
    "\001\001\000\002\001\001\000\004\011\046\001\001\000" +
    "\002\001\001\000\004\011\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\055\001\001\000\002\001\001\000\006\005\057" +
    "\006\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\062\006\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\066\006\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\073\006\023\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol cur_token) {
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Syntax error:");
        // report_error("Syntax error",null);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaExp ::= listaExp linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaExp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaExp ::= linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= exp PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= IDENT ASIG consec 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> c = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TablaSimbolos.insertar(id,Matrices.toArray(c)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= PRINT AP consec CP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> c = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Matrices.print(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // consec ::= consec MAS consec 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ArrayList<Double>> c1 = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> c2 = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                double [][] aux1 = Matrices.toArray(c1);
                double [][] aux2 = Matrices.toArray(c2);
                if (Matrices.filas(aux1) != Matrices.filas(aux2) || Matrices.columnas(aux1) != Matrices.columnas(aux2)) {
                    System.out.println(Matrices.ERROR_SUMA);
                    System.exit(0);
                } else {
                    RESULT = Matrices.toArrayList(Matrices.suma(aux1,aux2)); 
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // consec ::= consec MENOS consec 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ArrayList<Double>> c1 = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> c2 = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                double [][] aux1 = Matrices.toArray(c1);
                double [][] aux21 = Matrices.toArray(c2);
                double [][] aux22 = Matrices.producto(-1,aux21);
                if (Matrices.filas(aux1) != Matrices.filas(aux22) || Matrices.columnas(aux1) != Matrices.columnas(aux22)) {
                    System.out.println(Matrices.ERROR_SUMA);
                    System.exit(0);
                } else {
                    RESULT = Matrices.toArrayList(Matrices.suma(aux1,aux22)); 
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // consec ::= consec POR consec 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ArrayList<Double>> c1 = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> c2 = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                double [][] aux1 = Matrices.toArray(c1);
                double [][] aux2 = Matrices.toArray(c2);
                System.out.println(Arrays.deepToString(aux1));
                System.out.println(Arrays.deepToString(aux2));
                if (Matrices.columnas(aux1) != Matrices.filas(aux2)) {
                    System.out.println(Matrices.ERROR_PROD);
                    System.exit(0);
                } else {
                    RESULT = Matrices.toArrayList(Matrices.producto(aux1,aux2));
                }     
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // consec ::= consec DIV consec 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ArrayList<Double>> c1 = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> c2 = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                double [][] aux1 = Matrices.toArray(c1);
                double [][] aux2 = Matrices.toArray(c2);
                if (Matrices.filas(aux2) != Matrices.columnas(aux2) || Matrices.determinante(aux2) == 0) {
                    System.out.println(Matrices.ERROR_INVERSA);
                    System.exit(0);
                } else {
                    double [][] auxx2 = Matrices.inversa(aux2);
                    if (Matrices.columnas(aux1) != Matrices.filas(auxx2)) {
                        System.out.println(Matrices.ERROR_PROD);
                        System.exit(0);
                    } else {
                        RESULT = Matrices.toArrayList(Matrices.producto(aux1,auxx2));
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // consec ::= AP consec CP 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> c = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // consec ::= operando 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> o = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // consec ::= MENOS operando 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> o = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.toArrayList(Matrices.producto(-1,Matrices.toArray(o))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operando ::= AC interior CC 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> i = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    boolean vale = true;
                    int dim = i.get(0).size();
                    for (int j = 1; j < i.size() && vale; j++) {
                        if (i.get(j).size() != dim) {
                            vale = false;
                        }
                    }

                    if (vale) {
                        RESULT = i;
                    } else {
                        System.out.println(Matrices.ERROR_FILAS);
                        System.exit(0);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operando ::= ALL interiorJava CLL 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int iJleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iJright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> iJ = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    boolean vale = true;
                    int dim = iJ.get(0).size();
                    for (int j = 1; j < iJ.size() && vale; j++) {
                        if (iJ.get(j).size() != dim) {
                            vale = false;
                        }
                    }

                    if (vale) {
                        RESULT = iJ;
                    } else {
                        System.out.println(Matrices.ERROR_FILAS);
                        System.exit(0);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operando ::= INVERSA AP consec CP 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> c = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    double [][] aux1 = Matrices.toArray(c);
                    if (Matrices.filas(aux1) != Matrices.columnas(aux1) || Matrices.determinante(aux1) == 0) {
                        System.out.println(Matrices.ERROR_INVERSA);
                        System.exit(0);
                    } else {
                        RESULT = Matrices.toArrayList(Matrices.inversa(aux1));
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operando ::= TRANSPUESTA AP consec CP 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> c = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Matrices.toArrayList(Matrices.transpuesta(Matrices.toArray(c))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operando ::= ADJUNTA AP consec CP 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ArrayList<Double>> c = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    double [][] aux1 = Matrices.toArray(c);
                    if (Matrices.filas(aux1) != Matrices.columnas(aux1)) {
                        System.out.println(Matrices.ERROR_ADJUNTA);
                        System.exit(0);
                    } else {
                        RESULT = Matrices.toArrayList(Matrices.adjunta(aux1));
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operando ::= IDENT 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    double [][] aux = TablaSimbolos.buscar(id);
                    if (aux == null) {
                        System.out.println(TablaSimbolos.ERROR_NOEXISTE);
                        System.exit(0);
                    } else {
                        RESULT = Matrices.toArrayList(TablaSimbolos.buscar(id));
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // interior ::= fila 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (RESULT == null) {
                    RESULT = new ArrayList<>();
                    RESULT.add(f);
                } else {
                    RESULT.add(f);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interior",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // interior ::= fila PYC interior 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> i = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if (RESULT == null) {
                    RESULT = new ArrayList<>();
                    RESULT.add(f);
                    RESULT.addAll(i);
                } else {
                    RESULT.add(f);
                    RESULT.addAll(i);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interior",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fila ::= NUMERO 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (RESULT == null) {
                    RESULT = new ArrayList<>();
                    RESULT.add(n);
                } else {
                    RESULT.add(n);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fila ::= NUMERO COMA fila 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (RESULT == null) {
                    RESULT = new ArrayList<>();
                    RESULT.add(n);
                    RESULT.addAll(f);
                } else {
                    RESULT.add(n);
                    RESULT.addAll(f);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // interiorJava ::= ALL fila CLL 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if (RESULT == null) {
                            RESULT = new ArrayList<>();
                            RESULT.add(f);
                        } else {
                            RESULT.add(f);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interiorJava",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // interiorJava ::= ALL fila CLL COMA interiorJava 
            {
              ArrayList<ArrayList<Double>> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Double> f = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int iJleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iJright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Double>> iJ = (ArrayList<ArrayList<Double>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if (RESULT == null) {
                            RESULT = new ArrayList<>();
                            RESULT.add(f);
                            RESULT.addAll(iJ);
                        } else {
                            RESULT.add(f);
                            RESULT.addAll(iJ);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interiorJava",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
